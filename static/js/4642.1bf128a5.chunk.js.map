{"version":3,"file":"static/js/4642.1bf128a5.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/UnitConverter/hooks.ts","components/UnitConverter/types.ts","constants/tools/unitConverter.ts","helpers/number.ts","helpers/pageCache.ts","helpers/webStorage.ts","models/unitConverter.ts","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useEffect, useMemo, useRef } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nimport PageCache from \"helpers/pageCache\";\nimport {\n  calculateConversionRate,\n  calculateConversionRateForFavorites,\n  sanitizeNumericInput,\n  getDefaultFavorites\n} from \"models/unitConverter\";\nimport * as CONST_UNIT_CONVERTER from \"constants/tools/unitConverter\";\nimport {\n  E_PageCacheKeys,\n  E_UnitConverterActions,\n  T_ConverionRateAPIFn,\n  T_FavoriteCodes,\n  T_UnitConverterAction,\n  T_UnitConverterPropsDefaults,\n  T_UnitConverterState\n} from \"./types\";\n\nexport function useConversionRates(\n  dispatch: React.Dispatch<T_UnitConverterAction>,\n  conversionRatesAPI?: T_ConverionRateAPIFn\n) {\n  useEffect(() => {\n    const fetchData = async () => {\n      if (conversionRatesAPI) {\n        let result = await conversionRatesAPI();\n\n        if (result) {\n          dispatch([E_UnitConverterActions.setConversionRates, result]);\n        }\n      }\n    };\n\n    fetchData();\n  }, [conversionRatesAPI, dispatch]);\n}\n\nexport function useElementHandlers(\n  dispatch: React.Dispatch<T_UnitConverterAction>,\n  pageCache: PageCache\n) {\n  const inputValueEl = useRef<HTMLInputElement>(null);\n  const targetValueEl = useRef<HTMLInputElement>(null);\n\n  const eventHandlers = useMemo(() => {\n    const handleInputValueChange = (\n      event: React.ChangeEvent<HTMLInputElement>\n    ) => dispatch([E_UnitConverterActions.setInputValue, event.target.value]);\n    const handleTargetValueChange = (\n      event: React.ChangeEvent<HTMLInputElement>\n    ) => dispatch([E_UnitConverterActions.setTargetValue, event.target.value]);\n    const handleListItemAction = (\n      event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n    ) => {\n      const { code, actionName } = event.currentTarget.dataset;\n      if (code && actionName) {\n        switch (\n          actionName as unknown as CONST_UNIT_CONVERTER.E_UnitConverterListItemActions\n        ) {\n          case CONST_UNIT_CONVERTER.E_UnitConverterListItemActions.input: {\n            pageCache.set(E_PageCacheKeys.inputCode, code);\n            dispatch([E_UnitConverterActions.setInputCode, code]);\n            inputValueEl.current?.focus();\n            return;\n          }\n          case CONST_UNIT_CONVERTER.E_UnitConverterListItemActions.target: {\n            pageCache.set(E_PageCacheKeys.targetCode, code);\n            dispatch([E_UnitConverterActions.setTargetCode, code]);\n            targetValueEl.current?.focus();\n            return;\n          }\n          default:\n            return;\n        }\n      }\n    };\n    const handleInputTargetCodeSwapClick = (\n      inputCode: string,\n      targetCode: string\n    ) => {\n      pageCache.set(E_PageCacheKeys.inputCode, targetCode);\n      pageCache.set(E_PageCacheKeys.targetCode, inputCode);\n      dispatch([E_UnitConverterActions.swapInputTargetCode]);\n      inputValueEl.current?.focus();\n    };\n    const handleInputClearClick = () => {\n      dispatch([E_UnitConverterActions.setInputValue, \"\"]);\n      inputValueEl.current?.focus();\n    };\n    const handleTargetClearClick = () => {\n      dispatch([E_UnitConverterActions.setTargetValue, \"\"]);\n      targetValueEl.current?.focus();\n    };\n\n    return {\n      handleInputValueChange,\n      handleTargetValueChange,\n      handleListItemAction,\n      handleInputClearClick,\n      handleTargetClearClick,\n      handleInputTargetCodeSwapClick\n    };\n  }, [dispatch, pageCache]);\n\n  return {\n    inputValueEl,\n    targetValueEl,\n    ...eventHandlers\n  };\n}\n\nexport function useDefaults(defaults: T_UnitConverterPropsDefaults) {\n  const location = useLocation();\n\n  return useMemo(() => {\n    const pageCache = new PageCache(location.pathname);\n    return {\n      inputCode:\n        pageCache.get<string>(E_PageCacheKeys.inputCode) || defaults.inputCode,\n      targetCode:\n        pageCache.get<string>(E_PageCacheKeys.targetCode) ||\n        defaults.targetCode,\n      favorites: getDefaultFavorites(\n        (pageCache.get(E_PageCacheKeys.favoriteCodes) as T_FavoriteCodes) ||\n          defaults.favoriteCodes\n      ),\n      pageCache\n    };\n  }, [location, defaults]);\n}\n\nexport const unitConverterReducer = (\n  state: T_UnitConverterState,\n  [type, payload]: T_UnitConverterAction\n) => {\n  switch (type) {\n    case E_UnitConverterActions.setConversionRates:\n      return {\n        ...state,\n        conversionRates: payload\n      };\n\n    case E_UnitConverterActions.setInputCode: {\n      const newTargetValue =\n        state.conversionRates && Number(state.inputValue) > 0\n          ? calculateConversionRate(\n              state.conversionRates,\n              payload,\n              state.targetCode,\n              Number(state.inputValue)\n            )\n          : state.targetValue;\n\n      return {\n        ...state,\n        inputCode: payload,\n        targetValue: newTargetValue,\n        favorites:\n          state.conversionRates && Number(state.inputValue) > 0\n            ? calculateConversionRateForFavorites(\n                state.favorites,\n                state.conversionRates,\n                payload,\n                state.inputValue\n              )\n            : state.favorites\n      };\n    }\n\n    case E_UnitConverterActions.setTargetCode: {\n      const newInputValue =\n        state.conversionRates && Number(state.targetValue) > 0\n          ? calculateConversionRate(\n              state.conversionRates,\n              payload,\n              state.inputCode,\n              Number(state.targetValue)\n            )\n          : state.inputValue;\n\n      return {\n        ...state,\n        targetCode: payload,\n        inputValue: newInputValue,\n        favorites:\n          state.conversionRates && Number(newInputValue) > 0\n            ? calculateConversionRateForFavorites(\n                state.favorites,\n                state.conversionRates,\n                payload,\n                newInputValue\n              )\n            : state.favorites\n      };\n    }\n\n    case E_UnitConverterActions.swapInputTargetCode: {\n      return {\n        ...state,\n        inputCode: state.targetCode,\n        targetCode: state.inputCode,\n        inputValue: state.targetValue,\n        targetValue: state.inputValue\n      };\n    }\n\n    case E_UnitConverterActions.setInputValue: {\n      const sanitizedInputValue = sanitizeNumericInput(payload);\n\n      // Avoid state update (and re-render) if there is no change\n      if (sanitizedInputValue === state.inputValue) {\n        return state;\n      }\n\n      return {\n        ...state,\n        inputValue: sanitizedInputValue,\n        targetValue: state.conversionRates\n          ? calculateConversionRate(\n              state.conversionRates,\n              state.inputCode,\n              state.targetCode,\n              Number(sanitizedInputValue)\n            )\n          : state.targetValue,\n        favorites: state.conversionRates\n          ? calculateConversionRateForFavorites(\n              state.favorites,\n              state.conversionRates,\n              state.inputCode,\n              sanitizedInputValue\n            )\n          : state.favorites\n      };\n    }\n\n    case E_UnitConverterActions.setTargetValue: {\n      const sanitizedTargetValue = sanitizeNumericInput(payload);\n\n      // Avoid state update (and re-render) if there is no change\n      if (sanitizedTargetValue === state.targetValue) {\n        return state;\n      }\n\n      const newInputValue = state.conversionRates\n        ? calculateConversionRate(\n            state.conversionRates,\n            state.targetCode,\n            state.inputCode,\n            Number(sanitizedTargetValue)\n          )\n        : state.inputValue;\n\n      return {\n        ...state,\n        inputValue: newInputValue,\n        targetValue: sanitizedTargetValue,\n        favorites: state.conversionRates\n          ? calculateConversionRateForFavorites(\n              state.favorites,\n              state.conversionRates,\n              state.inputCode,\n              newInputValue\n            )\n          : state.favorites\n      };\n    }\n\n    case E_UnitConverterActions.toggleFavorite: {\n      const favoritesArrWithoutPayloadItem = state.favorites.filter(payload);\n\n      // Check if the filtering resulted in a smaller array than state.favorites\n      if (favoritesArrWithoutPayloadItem.length < state.favorites.length) {\n        // This means that the supplied item already existed in state.favorites\n        // and we just obtained an array after removing it.\n        return {\n          ...state,\n          favorites: favoritesArrWithoutPayloadItem\n        };\n      }\n\n      // Otherwise it means that payload item is a new item to be favorited\n      return {\n        ...state,\n        favorites: [...state.favorites, payload]\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport {\n  T_ConversionFomulas,\n  T_UnitConversionMap\n} from \"types/tools/unitConverter\";\nimport { T_Nullable, T_Object } from \"types/generic\";\n\nexport const enum E_PageCacheKeys {\n  inputCode = \"inputCode\",\n  targetCode = \"targetCode\",\n  favoriteCodes = \"favoriteCodes\"\n}\n\nexport const enum E_UnitConverterActions {\n  setConversionRates,\n  setInputCode,\n  setTargetCode,\n  setInputValue,\n  setTargetValue,\n  swapInputTargetCode,\n  toggleFavorite\n}\n\nexport type T_ConverionRateAPIFn = (...args: any[]) => Promise<\n  | {\n      conversionRates: T_ConversionRates;\n    }\n  | undefined\n  | null\n>;\n\nexport type T_UnitConverterPropsDefaults = {\n  inputCode: string;\n  targetCode: string;\n  favoriteCodes: T_FavoriteCodes;\n};\n\nexport type T_UnitConverterProps = {\n  conversionRatesAPI?: T_ConverionRateAPIFn;\n  conversionRates?: T_ConversionRates;\n  convesionFormulas?: T_ConversionFomulas;\n  allUnitsMap: T_UnitConversionMap;\n  defaults: T_UnitConverterPropsDefaults;\n  UnitIconComponent?: React.ComponentType<{\n    code: string;\n    wrapperClassName?: string;\n    iconClassName?: string;\n  }>;\n};\n\nexport type T_FavoriteItemWithValue = {\n  code: string;\n  value: T_Nullable<number>;\n};\n\nexport type T_FavoriteCodes = string[];\n\nexport type T_FavoritesWithValue = T_FavoriteItemWithValue[];\n\nexport type T_ConversionRates = T_Object<number>;\n\nexport type T_UnitConverterAction = [\n  type: E_UnitConverterActions,\n  payload?: any\n];\n\nexport type T_UnitConverterState = {\n  conversionRates?: T_ConversionRates;\n  inputCode: string;\n  targetCode: string;\n  favorites: T_FavoritesWithValue;\n  inputValue: string | number;\n  targetValue: string | number;\n};\n","export const enum E_UnitConverterListItemActions {\n  input = \"INPUT\",\n  target = \"TARGET\"\n}\n","export function toNumber(x: any) {\n  return +x;\n}\n\nexport function round(num: number | string, fractionDigits: number = 2) {\n  return toNumber(toNumber(num).toFixed(fractionDigits));\n}\n","import { LocalStorage } from \"helpers/webStorage\";\n\nexport default class PageCache {\n  keyPrefix: string;\n  cachedKeys: string[] = [];\n\n  constructor(pathname: string) {\n    this.keyPrefix = pathname;\n  }\n\n  private getPageKey(key: string) {\n    return `${this.keyPrefix}-${key}`;\n  }\n\n  public set = (key: string, data: any = null): void => {\n    const pageKey = this.getPageKey(key);\n    LocalStorage.setItem(pageKey, JSON.stringify(data));\n    this.cachedKeys.push(key);\n  };\n\n  public get = <Result>(key: string): Result | null => {\n    const pageKey = this.getPageKey(key);\n    return JSON.parse(LocalStorage.getItem(pageKey) ?? \"null\");\n  };\n\n  public remove = (key: string): void => {\n    const pageKey = this.getPageKey(key);\n    LocalStorage.removeItem(pageKey);\n    this.cachedKeys = this.cachedKeys.filter((k) => k !== key);\n  };\n\n  public clearAll = () => {\n    this.cachedKeys.forEach((key) => this.remove(key));\n    this.cachedKeys = [];\n  };\n}\n","export function isStorageSupported(type: string): boolean {\n  try {\n    const storage = (window as { [key: string]: any })[type];\n    const testKey = \"__storage_test__\";\n\n    storage.setItem(testKey, \"1\");\n    storage.removeItem(testKey);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n// Wrapper class for storage\nexport class MemoryStorage {\n  public storage: { [x: string]: string } = {};\n\n  public setItem = (key: string, data: string): void => {\n    const json = (data && data.toString()) || \"\";\n\n    this.storage[key] = json;\n  };\n\n  public getItem = (key: string): string | null => this.storage[key] || \"\";\n\n  public removeItem = (key: string): void => {\n    delete this.storage[key];\n  };\n\n  public clear = () => {\n    this.storage = new MemoryStorage().storage;\n  };\n}\n\nexport const LocalStorage = isStorageSupported(\"localStorage\")\n  ? window.localStorage\n  : new MemoryStorage();\n\nexport const SessionStorage = isStorageSupported(\"sessionStorage\")\n  ? window.sessionStorage\n  : new MemoryStorage();\n","import {\n  T_ConversionRates,\n  T_FavoriteCodes,\n  T_FavoriteItemWithValue,\n  T_FavoritesWithValue\n} from \"components/UnitConverter/types\";\nimport { round } from \"helpers/number\";\n\nexport function sanitizeNumericInput(value: string) {\n  return (\n    value\n      // allow only numbers (with/without decimal values)\n      .replace(/[^0-9.]/g, \"\")\n      // allow only one decimal\n      .replace(/(\\..*?)\\..*/g, \"$1\")\n      // allow leading zero only for decimal values\n      .replace(/^0(\\d)/, \"$1\")\n  );\n}\n\nexport function calculateConversionRateForFavorites(\n  favorites: T_FavoriteItemWithValue[],\n  conversionRates: T_ConversionRates,\n  inputCode: string,\n  inputAmount: string | number\n) {\n  return favorites.map((favItem) => ({\n    ...favItem,\n    value: calculateConversionRate(\n      conversionRates,\n      inputCode,\n      favItem.code,\n      inputAmount\n    )\n  }));\n}\n\nexport function getDefaultFavorites(\n  favoriteCodes: T_FavoriteCodes\n): T_FavoritesWithValue {\n  return favoriteCodes.map((code) => ({ code, value: null }));\n}\n\n/**\n * Assume:\n *    base code (of master data): BBB\n *    input code: CCC\n *    input value: x\n *    target code: YYY\n *\n * and we know (from master data):\n *    1 BBB = n1 CCC\n *    1 BBB = n2 YYY\n *\n * then,\n *               1 CCC  =  (1 / n1) BBB\n *               x CCC  =  x * (1 / n1) BBB\n *    x * (1 / n1) BBB  =  n2 * x * (1 / n1) YYY\n *               x CCC  =  n2 * x * / n1 YYY\n */\nexport function calculateConversionRate(\n  conversionRates: T_ConversionRates,\n  inputCode: string,\n  targetCode: string,\n  inputAmount: string | number\n) {\n  const x = +inputAmount;\n  const n1 = conversionRates[inputCode];\n  const n2 = conversionRates[targetCode];\n\n  return round((n2 * x) / n1);\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iterableToArray","unsupportedIterableToArray","TypeError","useConversionRates","dispatch","conversionRatesAPI","useEffect","fetchData","result","E_UnitConverterActions","useElementHandlers","pageCache","inputValueEl","useRef","targetValueEl","eventHandlers","useMemo","handleInputValueChange","event","target","value","handleTargetValueChange","handleListItemAction","currentTarget","dataset","code","actionName","CONST_UNIT_CONVERTER","set","E_PageCacheKeys","current","focus","handleInputClearClick","handleTargetClearClick","handleInputTargetCodeSwapClick","inputCode","targetCode","useDefaults","defaults","location","useLocation","PageCache","pathname","get","favorites","getDefaultFavorites","favoriteCodes","unitConverterReducer","state","type","payload","conversionRates","newTargetValue","Number","inputValue","calculateConversionRate","targetValue","calculateConversionRateForFavorites","newInputValue","sanitizedInputValue","sanitizeNumericInput","sanitizedTargetValue","favoritesArrWithoutPayloadItem","filter","length","E_UnitConverterListItemActions","toNumber","x","round","num","fractionDigits","toFixed","keyPrefix","cachedKeys","key","data","pageKey","getPageKey","LocalStorage","JSON","stringify","push","parse","remove","k","clearAll","forEach","this","isStorageSupported","storage","window","testKey","setItem","removeItem","error","MemoryStorage","json","toString","getItem","clear","localStorage","SessionStorage","sessionStorage","replace","inputAmount","map","favItem","n1","n2","_defineProperty","obj","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","_objectSpread2","i","arguments","source","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}