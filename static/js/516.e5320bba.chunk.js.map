{"version":3,"file":"static/js/516.e5320bba.chunk.js","mappings":"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","sources":["constants/currencyEx.ts","helpers/API/currencyEx.ts","helpers/request.ts","helpers/time.ts","helpers/webStorage.ts","models/currencyEx.ts","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","pages/Tools/Money/CurrencyEx/hooks.ts","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["import { T_Object } from \"types/generic\";\n\nexport const defaultInputCode = \"USD\";\nexport const defaultTargetCode = \"USD\";\nexport const defaultFavorites = [\n  \"INR\",\n  \"NZD\",\n  \"USD\",\n  \"AUD\",\n  \"CAD\",\n  \"GBP\",\n  \"EUR\",\n  \"JPY\",\n  \"CNY\"\n];\n\nexport const currencyMap: T_CurrencyMap = {\n  JPY: {\n    name: \"Japanese Yen\",\n    symbol: \"¥\",\n    countryCode: \"JP\"\n  },\n  USD: {\n    name: \"US Dollar\",\n    symbol: \"$\",\n    countryCode: \"US\"\n  },\n  GBP: {\n    name: \"Great British Pound\",\n    symbol: \"£\",\n    countryCode: \"GB\"\n  },\n  EUR: {\n    name: \"Euro\",\n    symbol: \"€\",\n    countryCode: \"EU\"\n  },\n  INR: {\n    name: \"Indian Rupee\",\n    symbol: \"₹\",\n    countryCode: \"IN\"\n  },\n  RUB: {\n    name: \"Russian Ruble\",\n    symbol: \"₽\",\n    countryCode: \"RU\"\n  },\n  CNY: {\n    name: \"Chinese Yuan\",\n    symbol: \"元\",\n    countryCode: \"CN\"\n  },\n  NZD: {\n    name: \"New Zealand Dollar\",\n    symbol: \"$\",\n    countryCode: \"NZ\"\n  },\n  AUD: {\n    name: \"Australian Dollar\",\n    symbol: \"$\",\n    countryCode: \"AU\"\n  },\n  CAD: {\n    name: \"Canadian Dollar\",\n    symbol: \"$\",\n    countryCode: \"CA\"\n  }\n};\n\n/**\n * Types\n */\nexport type T_CurrencyMapItem = Record<\n  \"name\" | \"symbol\" | \"countryCode\",\n  string\n>;\n\nexport type T_CurrencyMap = T_Object<T_CurrencyMapItem>;\n","import CONST from \"constants/app\";\nimport * as CONST_CURRENCY_EX from \"constants/currencyEx\";\nimport { getTimetamp } from \"helpers/time\";\nimport { LocalStorage } from \"helpers/webStorage\";\nimport {\n  mapCurrencyExRateResponse,\n  T_CurrencyExData,\n  T_CurrencyExResponse\n} from \"models/currencyEx\";\nimport request, { T_HTTPMethod } from \"../request\";\n\nexport async function fetchCurrencyExData() {\n  let result: T_CurrencyExData | null = JSON.parse(\n    LocalStorage.getItem(CONST.webStorage.currencyExData) ?? \"null\"\n  );\n\n  // Make the API call only when necessary\n  if (\n    !result || // if there is no cached data yet\n    getTimetamp() > result.timeNextUpdate // // OR if cached data is expired\n  ) {\n    const response = await request<T_CurrencyExResponse>({\n      method: T_HTTPMethod.GET,\n      endpoint: CONST.API.currencyEx\n    });\n    if (response.result) {\n      result = mapCurrencyExRateResponse(response.result);\n      // Update cache with latest data\n      LocalStorage.setItem(\n        CONST.webStorage.currencyExData,\n        JSON.stringify(result)\n      );\n    }\n  }\n\n  return result;\n}\n\nexport function getCachedInputCodeOrDefault() {\n  return (\n    LocalStorage.getItem(CONST.webStorage.currencyExInputCode) ||\n    CONST_CURRENCY_EX.defaultTargetCode\n  );\n}\n\nexport function getCachedTargetCodeOrDefault() {\n  return (\n    LocalStorage.getItem(CONST.webStorage.currencyExTargetCode) ||\n    CONST_CURRENCY_EX.defaultTargetCode\n  );\n}\n\nexport function cacheInputCodeSync(currencyCode: string) {\n  LocalStorage.setItem(CONST.webStorage.currencyExInputCode, currencyCode);\n}\n\nexport function cacheTargetCodeSync(currencyCode: string) {\n  LocalStorage.setItem(CONST.webStorage.currencyExTargetCode, currencyCode);\n}\n","export const enum T_HTTPMethod {\n  GET = \"GET\",\n  POST = \"POST\",\n  PUT = \"PUT\",\n  PATCH = \"PATCH\",\n  DELETE = \"DELETE\"\n}\n\ninterface T_RequestOptions {\n  method: T_HTTPMethod;\n  endpoint: string;\n  params?: { [key: string]: any };\n  headers?: HeadersInit;\n  body?: any;\n  rawBody?: BodyInit | null;\n}\n\nexport const getQueryParams = (params: { [key: string]: string }): string =>\n  Object.keys(params)\n    .filter(\n      (k) =>\n        typeof params[k] !== \"undefined\" &&\n        params[k] !== null &&\n        params[k] !== \"\"\n    ) // removes if empty, but accepts \"0\"\n    .map((k) => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`)\n    .join(\"&\");\n\nexport default async function request<T>({\n  method,\n  endpoint,\n  params,\n  headers,\n  body,\n  rawBody\n}: T_RequestOptions): Promise<{\n  result?: T;\n  error?: unknown;\n}> {\n  let url = endpoint;\n  if (params) {\n    url += (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + getQueryParams(params);\n  }\n\n  const fetchOptions: RequestInit = {\n    headers,\n    method,\n    credentials: \"same-origin\",\n    mode: \"cors\"\n  };\n  if (method !== T_HTTPMethod.GET && (rawBody || body)) {\n    fetchOptions.body = rawBody || JSON.stringify(body);\n  }\n\n  try {\n    const response = await fetch(url, fetchOptions);\n    const contentType = response.headers.get(\"Content-Type\") || \"\";\n    let result: T;\n\n    if (contentType.includes(\"application/json\")) {\n      result = await response.json();\n    } else {\n      result = response as unknown as T;\n    }\n\n    if (response.status >= 400) {\n      throw result || (await response.text());\n    }\n\n    return { result };\n  } catch (error) {\n    return { error: error instanceof Error ? error.message : error };\n  }\n}\n","export function getTimetamp() {\n  return Math.floor(+Date.now() / 1000);\n}\n","export function isStorageSupported(type: string): boolean {\n  try {\n    const storage = (window as { [key: string]: any })[type];\n    const testKey = \"__storage_test__\";\n\n    storage.setItem(testKey, \"1\");\n    storage.removeItem(testKey);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n// Wrapper class for storage\nexport class MemoryStorage {\n  public storage: { [x: string]: string } = {};\n\n  public setItem = (key: string, data: string): void => {\n    const json = (data && data.toString()) || \"\";\n\n    this.storage[key] = json;\n  };\n\n  public getItem = (key: string): string | null => this.storage[key] || \"\";\n\n  public removeItem = (key: string): void => {\n    delete this.storage[key];\n  };\n\n  public clear = () => {\n    this.storage = new MemoryStorage().storage;\n  };\n}\n\nexport const LocalStorage = isStorageSupported(\"localStorage\")\n  ? window.localStorage\n  : new MemoryStorage();\n\nexport const SessionStorage = isStorageSupported(\"sessionStorage\")\n  ? window.sessionStorage\n  : new MemoryStorage();\n","import * as CONST_CURRENCY_EX from \"constants/currencyEx\";\nimport { T_FavoriteWithExRate } from \"pages/Tools/Money/CurrencyEx/hooks\";\nimport { T_Nullable, T_Object } from \"types/generic\";\n\nexport function mapCurrencyExRateResponse(response: T_CurrencyExResponse) {\n  return {\n    baseCode: response.base_code,\n    conversionRates: response.conversion_rates,\n    timeLastUpdate: response.time_last_update_unix,\n    timeNextUpdate: response.time_next_update_unix\n  };\n}\n\nexport function sanitizeInputAmount(value: string) {\n  return value\n    .replace(/[^0-9.]/g, \"\") // allow only number\n    .replace(/(\\..*?)\\..*/g, \"$1\"); // allow only one decimal\n}\n\nexport function getFavoritesWithExRates(\n  favorites: T_FavoriteWithExRate[],\n  conversionRates: T_Object<number>,\n  inputCode: string,\n  inputAmount: string\n) {\n  return favorites.map((favItem) => ({\n    ...favItem,\n    exRate: calculateExRate(\n      conversionRates,\n      inputCode,\n      favItem.currencyCode,\n      Number(inputAmount)\n    )\n  }));\n}\n\nexport function getDefaultFavorites() {\n  return CONST_CURRENCY_EX.defaultFavorites.map((code) => ({\n    currencyCode: code,\n    exRate: null\n  }));\n}\n\n/**\n * Assume:\n *    base currency code (from API): USD\n *    input currency code: EUR\n *    input amount: x\n *    target currency code: YYY\n *\n * and we know (from API):\n *    1 USD = n1 EUR\n *    1 USD = n2 YYY\n *\n * then,\n *               1 EUR  =  (1 / n1) USD\n *               x EUR  =  x * (1 / n1) USD\n *    x * (1 / n1) USD  =  n2 * x * (1 / n1) YYY\n *               x EUR  =  n2 * x * / n1 YYY\n */\nfunction calculateExRate(\n  conversionRates: T_Object<number>,\n  inputCode: string,\n  targetCode: string,\n  inputAmount: number\n) {\n  const x = inputAmount;\n  const n1 = conversionRates[inputCode];\n  const n2 = conversionRates[targetCode];\n\n  return +((n2 * x) / n1).toFixed(2);\n}\n\n/**\n * Types\n */\nexport interface T_CurrencyExResponse {\n  conversion_rates: T_Object<number>;\n  base_code: string;\n  time_last_update_unix: number;\n  time_last_update_utc: string;\n  time_next_update_unix: number;\n  time_next_update_utc: string;\n}\n\nexport type T_CurrencyExData = ReturnType<typeof mapCurrencyExRateResponse>;\n\nexport type T_CurrencyMapWithRates = T_Object<\n  CONST_CURRENCY_EX.T_CurrencyMapItem & { conversionRate: T_Nullable<number> }\n>;\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useEffect, useReducer } from \"react\";\n\nimport {\n  getDefaultFavorites,\n  getFavoritesWithExRates,\n  sanitizeInputAmount,\n  T_CurrencyExData\n} from \"models/currencyEx\";\nimport { T_Nullable, T_Object } from \"types/generic\";\nimport {\n  fetchCurrencyExData,\n  getCachedInputCodeOrDefault,\n  getCachedTargetCodeOrDefault\n} from \"helpers/API/currencyEx\";\n\nexport function useCurrencyExReducer(): [\n  T_CurrencyExState,\n  React.Dispatch<T_CurrencyExAction>\n] {\n  const [state, dispatch] = useReducer<\n    React.Reducer<T_CurrencyExState, T_CurrencyExAction>\n  >(currencyExReducer, {\n    inputCode: getCachedInputCodeOrDefault(),\n    targetCode: getCachedTargetCodeOrDefault(),\n    inputAmount: \"\",\n    favorites: getDefaultFavorites() // TODO: get from localstorage\n  });\n  useCurrencyExData(dispatch);\n\n  return [state, dispatch];\n}\n\nconst currencyExReducer = (\n  state: T_CurrencyExState,\n  [type, payload]: T_CurrencyExAction\n) => {\n  switch (type) {\n    case T_CurrencyExActionTypes.setData:\n      return {\n        ...state,\n        conversionRates: payload\n      };\n    case T_CurrencyExActionTypes.setInputCode:\n      return {\n        ...state,\n        inputCode: payload,\n        favorites:\n          state.conversionRates && Number(state.inputAmount) > 0\n            ? getFavoritesWithExRates(\n                state.favorites,\n                state.conversionRates,\n                payload,\n                state.inputAmount\n              )\n            : state.favorites\n      };\n    case T_CurrencyExActionTypes.setTargetCode:\n      return {\n        ...state,\n        targetCode: payload\n      };\n    case T_CurrencyExActionTypes.setInputAmount:\n      const sanitizedInputAmount = sanitizeInputAmount(payload);\n\n      // Avoid state update (and re-render) if there is no change\n      if (sanitizedInputAmount === state.inputAmount) {\n        return state;\n      }\n\n      return {\n        ...state,\n        inputAmount: sanitizedInputAmount,\n        favorites: state.conversionRates\n          ? getFavoritesWithExRates(\n              state.favorites,\n              state.conversionRates,\n              state.inputCode,\n              sanitizedInputAmount\n            )\n          : state.favorites\n      };\n    case T_CurrencyExActionTypes.setCurrencyToValue:\n      return {\n        ...state,\n        currencyToValue: payload\n      };\n    case T_CurrencyExActionTypes.toggleFavorite: {\n      const favoritesArrWithoutPayloadItem = state.favorites.filter(payload);\n\n      // Check if the filtering resulted in a smaller array than state.favorites\n      if (favoritesArrWithoutPayloadItem.length < state.favorites.length) {\n        // This means that the supplied item already existed in state.favorites\n        // and we just obtained an array after removing it.\n        return {\n          ...state,\n          favorites: favoritesArrWithoutPayloadItem\n        };\n      }\n\n      // Otherwise it means that payload item is a new item to be favorited\n      return {\n        ...state,\n        favorites: [...state.favorites, payload]\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nfunction useCurrencyExData(dispatch: React.Dispatch<T_CurrencyExAction>) {\n  useEffect(() => {\n    const fetchData = async () => {\n      let result: T_CurrencyExData | null = await fetchCurrencyExData();\n\n      if (result) {\n        dispatch([T_CurrencyExActionTypes.setData, result.conversionRates]);\n      }\n    };\n\n    fetchData();\n  }, []);\n}\n\n/**\n * Types\n */\nexport const enum T_CurrencyExActionTypes {\n  setData,\n  setInputCode,\n  setTargetCode,\n  setInputAmount,\n  setCurrencyToValue,\n  toggleFavorite\n}\n\nexport type T_FavoriteWithExRate = {\n  currencyCode: string;\n  exRate: T_Nullable<number>;\n};\n\ntype T_CurrencyExAction = [type: T_CurrencyExActionTypes, payload: any];\n\ntype T_CurrencyExState = {\n  conversionRates?: T_Object<number>;\n  inputCode: string;\n  targetCode: string;\n  inputAmount: string;\n  favorites: T_FavoriteWithExRate[];\n};\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}"],"names":["defaultInputCode","defaultTargetCode","defaultFavorites","currencyMap","JPY","name","symbol","countryCode","USD","GBP","EUR","INR","RUB","CNY","NZD","AUD","CAD","fetchCurrencyExData","result","JSON","parse","LocalStorage","CONST","getTimetamp","timeNextUpdate","request","method","T_HTTPMethod","endpoint","response","mapCurrencyExRateResponse","stringify","getCachedInputCodeOrDefault","CONST_CURRENCY_EX","getCachedTargetCodeOrDefault","cacheInputCodeSync","currencyCode","cacheTargetCodeSync","getQueryParams","params","Object","keys","filter","k","map","encodeURIComponent","join","headers","body","rawBody","url","indexOf","fetchOptions","credentials","mode","GET","fetch","get","includes","json","status","text","error","Error","message","Math","floor","Date","now","isStorageSupported","type","storage","window","testKey","setItem","removeItem","MemoryStorage","key","data","toString","getItem","clear","localStorage","SessionStorage","sessionStorage","baseCode","base_code","conversionRates","conversion_rates","timeLastUpdate","time_last_update_unix","time_next_update_unix","sanitizeInputAmount","value","replace","getFavoritesWithExRates","favorites","inputCode","inputAmount","favItem","exRate","calculateExRate","Number","getDefaultFavorites","code","targetCode","x","n1","toFixed","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iterableToArray","unsupportedIterableToArray","TypeError","useCurrencyExReducer","useReducer","currencyExReducer","state","dispatch","useEffect","fetchData","T_CurrencyExActionTypes","setData","useCurrencyExData","payload","setInputCode","setTargetCode","setInputAmount","sanitizedInputAmount","setCurrencyToValue","currencyToValue","toggleFavorite","favoritesArrWithoutPayloadItem","length","_defineProperty","obj","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}