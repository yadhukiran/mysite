{"version":3,"file":"static/js/424.a7ed1fd1.chunk.js","mappings":"sOAMO,SAASA,EAAcC,GAC5B,IAAMC,EAAkB,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAgBE,QACzC,SAACC,GAAD,OAAQC,IAAsBD,KAGhC,GAA0BE,EAAAA,EAAAA,UACxBC,EAAuCL,IADzC,eAAOM,EAAP,KAAcC,EAAd,KAaA,OATAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAaC,aAAY,WAC7BH,EAASF,EAAuCL,MAC/C,KACH,OAAO,kBAAMW,cAAcF,MAG1B,CAACV,IAEGO,EAGT,SAASD,EAAuCN,GAC9C,IAAMa,EAAMC,EAAAA,GAAAA,MACNC,EAAa,CAACC,EAAwBH,IAM5C,OALIb,GACFe,EAAWE,KAAX,MAAAF,GAAU,OACLf,EAAekB,KAAI,SAACf,GAAD,OAAQa,EAAwBH,EAAKV,QAGxDY,EAGT,SAASC,EACPG,EACAC,GAEA,IAAMC,EAAgBD,EAAWD,EAASG,QAAQF,GAAYD,EAG5DI,EAeEF,EAfFE,SACAC,EAcEH,EAdFG,eACAC,EAaEJ,EAbFI,gBAEAC,EAWEL,EAXFK,KACAC,EAUEN,EAVFM,OACAC,EASEP,EATFO,OACAC,EAQER,EARFQ,QAEAC,EAMET,EANFS,KACAC,EAKEV,EALFU,WACAC,EAIEX,EAJFW,UACAC,EAGEZ,EAHFY,IACAC,EAEEb,EAFFa,YACAC,EACEd,EADFc,aAGIC,EAAeC,EAAwBd,GACvCe,EAAWjB,EAAckB,SAAS,KAClCC,EAAcC,EAAAA,QAAAA,MAClB,SAACC,GAAD,OAAUA,EAAKC,WAAaP,MACzB,CACHQ,YAAa,GACbC,YAAa,IAGf,OAAO,gBACLC,SAAU1B,EACVgB,aAAAA,EACAZ,eAAAA,EACAC,gBAAAA,GACGe,GALL,IAMEd,KAAML,EAAckB,SAAS,MAC7BZ,OAAQN,EAAckB,SAAS,MAC/BX,OAAQP,EAAckB,SAAS,MAC/BD,SAAAA,EACAT,QAAAA,EACAC,KAAAA,EACAC,WAAAA,EACAC,UAAAA,EACAC,IAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAY,QAAUrB,EAAO,GAAM,IAAOC,EAAS,GAAM,GAAK,GAClDqB,UAAYrB,EAAS,GAAM,IAAOC,EAAS,GAAM,EAAI,GACrDqB,UAAYrB,EAAS,GAAM,IAAM,KAIrC,IAAMxB,EAAoBiC,EAAwBvB,EAAAA,GAAAA,MAAeS,UAEjE,SAASc,EAAwBD,GAC/B,OAAOA,EAAac,QAElB,WACA","sources":["shared/components/Clocks/hooks.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { DateTime } from \"luxon\";\n\nimport { T_ClockDataForTimeZone, T_ClocksDataState } from \"./types\";\nimport worldCountries from \"shared/constants/worldCountries\";\n\nexport function useClocksData(otherTimeZones?: string[]) {\n  const otherTimeZonesOnly = otherTimeZones?.filter(\n    (tz) => localTimeZoneName !== tz\n  );\n\n  const [state, setState] = useState<T_ClocksDataState>(\n    getClocksDataForLocalAndOtherTimeZones(otherTimeZonesOnly)\n  );\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setState(getClocksDataForLocalAndOtherTimeZones(otherTimeZonesOnly));\n    }, 1000);\n    return () => clearInterval(intervalId);\n    // otherTimeZonesWithoutLocal is computed based on otherTimeZones\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [otherTimeZones]);\n\n  return state;\n}\n\nfunction getClocksDataForLocalAndOtherTimeZones(otherTimeZones?: string[]) {\n  const now = DateTime.now();\n  const clocksData = [getClockDataForTimeZone(now)];\n  if (otherTimeZones) {\n    clocksData.push(\n      ...otherTimeZones.map((tz) => getClockDataForTimeZone(now, tz))\n    );\n  }\n  return clocksData;\n}\n\nfunction getClockDataForTimeZone(\n  datetime: DateTime,\n  timezone?: string\n): T_ClockDataForTimeZone {\n  const nowInTimeZone = timezone ? datetime.setZone(timezone) : datetime;\n  const {\n    // timeZone\n    zoneName,\n    offsetNameLong,\n    offsetNameShort,\n    // time\n    hour,\n    minute,\n    second,\n    isInDST,\n    // date\n    year,\n    monthShort,\n    monthLong,\n    day,\n    weekdayLong,\n    weekdayShort\n  } = nowInTimeZone;\n\n  const timeZoneName = standardizeTimeZoneName(zoneName);\n  const meridiem = nowInTimeZone.toFormat(\"a\");\n  const countryInfo = worldCountries.find(\n    (info) => info.timeZone === timeZoneName\n  ) || {\n    countryCode: \"\",\n    countryName: \"\"\n  };\n\n  return {\n    isLocal: !timezone,\n    timeZoneName,\n    offsetNameLong,\n    offsetNameShort,\n    ...countryInfo,\n    hour: nowInTimeZone.toFormat(\"hh\"),\n    minute: nowInTimeZone.toFormat(\"mm\"),\n    second: nowInTimeZone.toFormat(\"ss\"),\n    meridiem,\n    isInDST,\n    year,\n    monthShort,\n    monthLong,\n    day,\n    weekdayLong,\n    weekdayShort,\n    hourDeg: (hour / 12) * 360 + (minute / 60) * 30 + 90,\n    minuteDeg: (minute / 60) * 360 + (second / 60) * 6 + 90,\n    secondDeg: (second / 60) * 360 + 90\n  };\n}\n\nconst localTimeZoneName = standardizeTimeZoneName(DateTime.now().zoneName);\n\nfunction standardizeTimeZoneName(timeZoneName: string) {\n  return timeZoneName.replace(\n    // TODO: Stupid Chrome https://bugs.chromium.org/p/chromium/issues/detail?id=580195\n    \"Calcutta\",\n    \"Kolkata\"\n  );\n}\n"],"names":["useClocksData","otherTimeZones","otherTimeZonesOnly","filter","tz","localTimeZoneName","useState","getClocksDataForLocalAndOtherTimeZones","state","setState","useEffect","intervalId","setInterval","clearInterval","now","DateTime","clocksData","getClockDataForTimeZone","push","map","datetime","timezone","nowInTimeZone","setZone","zoneName","offsetNameLong","offsetNameShort","hour","minute","second","isInDST","year","monthShort","monthLong","day","weekdayLong","weekdayShort","timeZoneName","standardizeTimeZoneName","meridiem","toFormat","countryInfo","worldCountries","info","timeZone","countryCode","countryName","isLocal","hourDeg","minuteDeg","secondDeg","replace"],"sourceRoot":""}