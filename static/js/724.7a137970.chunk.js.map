{"version":3,"file":"static/js/724.7a137970.chunk.js","mappings":"4NAMe,SAASA,IACtB,IAAMC,GAAaC,EAAAA,EAAAA,QAAyB,MACtCC,GAAiBD,EAAAA,EAAAA,QAA4B,MAC7CE,GAAiBF,EAAAA,EAAAA,QAA4B,MACnD,GAAoCG,EAAAA,EAAAA,UAAS,IAA7C,eAAmBC,GAAnB,WACA,GAAwCD,EAAAA,EAAAA,UAAS,IAAjD,eAAqBE,GAArB,WAmCA,OACE,iBAAKC,UAAU,SAAf,WACE,eAAIA,UAAU,yBAAd,mCACA,kBACEC,WAAS,EACTC,YAAY,0BACZF,UAAU,MACVG,KAAK,OACLC,IAAKX,KAEP,kBAAMO,UAAU,OAAhB,WACE,qBACEI,IAAKT,EACLK,UAAU,WACVE,YAAY,gBAEd,iBAAKF,UAAU,gBAAf,WACE,mBACEK,QAnDM,WACd,IAAIC,EACJ,IAAK,IAAD,QACFA,EAAmBC,IAAAA,QAAA,iBACjBZ,QADiB,IACjBA,GADiB,UACjBA,EAAgBa,eADC,aACjB,EAAyBC,aADR,QACiB,GADjB,iBAEjBhB,QAFiB,IAEjBA,GAFiB,UAEjBA,EAAYe,eAFK,aAEjB,EAAqBC,aAFJ,QAEa,IAC9BC,WACF,MAAOC,GAAQ,IAAD,EACdL,EAAgB,iBACbK,QADa,IACbA,OADa,EACbA,EAAiBC,eADJ,QACe,2BAGjChB,EAAgBY,QAASC,MAAQH,EACjCR,EAAcQ,IAuCNH,KAAK,SACLH,UAAU,qBAHZ,6BAOA,mBACEK,QA1CM,WACd,IAAIQ,EACJ,IAAK,IAAD,QAKFA,EAJcN,IAAAA,QAAA,iBACZX,QADY,IACZA,GADY,UACZA,EAAgBY,eADJ,aACZ,EAAyBC,aADb,QACsB,GADtB,iBAEZhB,QAFY,IAEZA,GAFY,UAEZA,EAAYe,eAFA,aAEZ,EAAqBC,aAFT,QAEkB,IAEPC,SAASI,KAClC,MAAOH,GAAQ,IAAD,EACdE,EAAgB,iBACbF,QADa,IACbA,OADa,EACbA,EAAiBC,eADJ,QACe,2BAGjCjB,EAAgBa,QAASC,MAAQI,EACjCd,EAAgBc,IA6BRV,KAAK,SACLH,UAAU,qBAHZ,gCAQF,qBACEI,IAAKR,EACLI,UAAU,WACVE,YAAY,2B","sources":["pages/Tools/Crypto/index.tsx"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport CryptoAES from \"crypto-js/aes\";\nimport CryptoUTF8Enc from \"crypto-js/enc-utf8\";\n\nimport \"./styles.scss\";\n\nexport default function Crypto() {\n  const keyInputEl = useRef<HTMLInputElement>(null);\n  const encryptInputEl = useRef<HTMLTextAreaElement>(null);\n  const decryptInputEl = useRef<HTMLTextAreaElement>(null);\n  const [cipherText, setCipherText] = useState(\"\");\n  const [originalText, setOriginalText] = useState(\"\");\n\n  const encrypt = () => {\n    let encryptionResult: string;\n    try {\n      encryptionResult = CryptoAES.encrypt(\n        encryptInputEl?.current?.value ?? \"\",\n        keyInputEl?.current?.value ?? \"\"\n      ).toString();\n    } catch (error) {\n      encryptionResult =\n        (error as Error)?.message ?? \"ERROR::Failed to encrypt\";\n    }\n\n    decryptInputEl!.current!.value = encryptionResult;\n    setCipherText(encryptionResult);\n  };\n\n  const decrypt = () => {\n    let decryptionResult: string;\n    try {\n      const bytes = CryptoAES.decrypt(\n        decryptInputEl?.current?.value ?? \"\",\n        keyInputEl?.current?.value ?? \"\"\n      );\n      decryptionResult = bytes.toString(CryptoUTF8Enc);\n    } catch (error) {\n      decryptionResult =\n        (error as Error)?.message ?? \"ERROR::Failed to decrypt\";\n    }\n\n    encryptInputEl!.current!.value = decryptionResult;\n    setOriginalText(decryptionResult);\n  };\n\n  return (\n    <div className=\"Crypto\">\n      <h1 className=\"font-bold text-xl py-4\">AES (CBC w/o PBKDF2)</h1>\n      <input\n        autoFocus\n        placeholder=\"Secret Key 🗝\"\n        className=\"key\"\n        type=\"text\"\n        ref={keyInputEl}\n      />\n      <form className=\"form\">\n        <textarea\n          ref={encryptInputEl}\n          className=\"lhsInput\"\n          placeholder=\"Plain text\"\n        />\n        <div className=\"flex flex-col\">\n          <button\n            onClick={encrypt}\n            type=\"button\"\n            className=\"btn rounded-r-full\"\n          >\n            Encrypt ⇨\n          </button>\n          <button\n            onClick={decrypt}\n            type=\"button\"\n            className=\"btn rounded-l-full\"\n          >\n            ⇦ Decrypt\n          </button>\n        </div>\n        <textarea\n          ref={decryptInputEl}\n          className=\"rhsInput\"\n          placeholder=\"Encrypted text\"\n        />\n      </form>\n    </div>\n  );\n}\n"],"names":["Crypto","keyInputEl","useRef","encryptInputEl","decryptInputEl","useState","setCipherText","setOriginalText","className","autoFocus","placeholder","type","ref","onClick","encryptionResult","CryptoAES","current","value","toString","error","message","decryptionResult","CryptoUTF8Enc"],"sourceRoot":""}