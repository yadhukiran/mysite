{"version":3,"file":"static/js/4371.3ab8ef73.chunk.js","mappings":"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","sources":["components/Clocks/hooks.ts","components/Clocks/index.tsx","components/CountryFlag/index.tsx","webpack://mysite-dev/./src/components/Clocks/styles.scss?d2b9","webpack://mysite-dev/./src/components/CountryFlag/styles.scss?ae7e"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { DateTime } from \"luxon\";\n\nimport { T_ClockDataForTimeZone, T_ClocksDataState } from \"./types\";\nimport worldCountries from \"constants/worldCountries\";\n\nexport function useClocksData(otherTimeZones?: string[]) {\n  const otherTimeZonesOnly = otherTimeZones?.filter(\n    (tz) => localTimeZoneName !== tz\n  );\n\n  const [state, setState] = useState<T_ClocksDataState>(\n    getClocksDataForLocalAndOtherTimeZones(otherTimeZonesOnly)\n  );\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setState(getClocksDataForLocalAndOtherTimeZones(otherTimeZonesOnly));\n    }, 1000);\n    return () => clearInterval(intervalId);\n    // otherTimeZonesWithoutLocal is computed based on otherTimeZones\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [otherTimeZones]);\n\n  return state;\n}\n\nfunction getClocksDataForLocalAndOtherTimeZones(otherTimeZones?: string[]) {\n  const now = DateTime.now();\n  const clocksData = [getClockDataForTimeZone(now)];\n  if (otherTimeZones) {\n    clocksData.push(\n      ...otherTimeZones.map((tz) => getClockDataForTimeZone(now, tz))\n    );\n  }\n  return clocksData;\n}\n\nfunction getClockDataForTimeZone(\n  datetime: DateTime,\n  timezone?: string\n): T_ClockDataForTimeZone {\n  const nowInTimeZone = timezone ? datetime.setZone(timezone) : datetime;\n  const {\n    // timeZone\n    zoneName,\n    offsetNameLong,\n    offsetNameShort,\n    // time\n    hour,\n    minute,\n    second,\n    isInDST,\n    // date\n    year,\n    monthShort,\n    monthLong,\n    day,\n    weekdayLong,\n    weekdayShort\n  } = nowInTimeZone;\n\n  const timeZoneName = standardizeTimeZoneName(zoneName);\n  const meridiem = nowInTimeZone.toFormat(\"a\");\n  const countryInfo = worldCountries.find(\n    (info) => info.timeZone === timeZoneName\n  ) || {\n    countryCode: \"\",\n    countryName: \"\"\n  };\n\n  return {\n    isLocal: !timezone,\n    timeZoneName,\n    offsetNameLong,\n    offsetNameShort,\n    ...countryInfo,\n    hour: nowInTimeZone.toFormat(\"hh\"),\n    minute: nowInTimeZone.toFormat(\"mm\"),\n    second: nowInTimeZone.toFormat(\"ss\"),\n    meridiem,\n    isInDST,\n    year,\n    monthShort,\n    monthLong,\n    day,\n    weekdayLong,\n    weekdayShort,\n    hourDeg: (hour / 12) * 360 + (minute / 60) * 30 + 90,\n    minuteDeg: (minute / 60) * 360 + (second / 60) * 6 + 90,\n    secondDeg: (second / 60) * 360 + 90\n  };\n}\n\nconst localTimeZoneName = standardizeTimeZoneName(DateTime.now().zoneName);\n\nfunction standardizeTimeZoneName(timeZoneName: string) {\n  return timeZoneName.replace(\n    // TODO: Stupid Chrome https://bugs.chromium.org/p/chromium/issues/detail?id=580195\n    \"Calcutta\",\n    \"Kolkata\"\n  );\n}\n","import CountryFlag from \"components/CountryFlag\";\nimport { toNumber } from \"helpers/number\";\nimport React from \"react\";\nimport { useClocksData } from \"./hooks\";\n\nimport \"./styles.scss\";\nimport { T_ClocksProps } from \"./types\";\n\nexport default function Clocks({ otherTimeZones }: T_ClocksProps) {\n  const clocksData = useClocksData(otherTimeZones);\n\n  return (\n    <div className=\"Clocks\">\n      {clocksData.map((clock) => (\n        <div key={clock.timeZoneName} className=\"clockWrap\">\n          <div className=\"clockMeta\">\n            <div className=\"clockMetaHeadWrap\">\n              <CountryFlag code={clock.countryCode} />\n              &nbsp;\n              <span className=\"clockMetaTitle\">{clock.countryName}</span>\n              &nbsp;\n              {clock.isLocal && (\n                <svg\n                  className=\"-mt-1 w-5 h-5\"\n                  fill=\"#bbb\"\n                  viewBox=\"0 0 20 20\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path d=\"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\"></path>\n                </svg>\n              )}\n            </div>\n            {clock.weekdayLong},<br /> {clock.day} {clock.monthLong}{\" \"}\n            {clock.year}\n          </div>\n          <div className=\"analog-clock\">\n            <div className=\"analog-clock-face\">\n              <div className=\"dots\"></div>\n              <div className=\"dots\"></div>\n              <div className=\"dots\"></div>\n              <div className=\"dots\"></div>\n              <div className=\"dots\"></div>\n              <div className=\"dots\"></div>\n              <div\n                style={{ transform: `rotate(${clock.hourDeg}deg)` }}\n                className=\"hand hour-hand\"\n              ></div>\n              <div\n                style={{ transform: `rotate(${clock.minuteDeg}deg)` }}\n                className=\"hand min-hand\"\n              ></div>\n              <div\n                style={{ transform: `rotate(${clock.secondDeg}deg)` }}\n                className=\"hand sec-hand\"\n              ></div>\n              {clock.isInDST && (\n                <i className=\"pt-2 text-center block tracking-wider text-gray-400 text-xs\">\n                  daylight\n                  <br />\n                  saving\n                </i>\n              )}\n            </div>\n          </div>\n          <div className=\"digital-clock\">\n            <div className=\"digit digit-hour\">{clock.hour}</div>\n            <span className=\"self-center text-gray-300 animate-ping\">:</span>\n            <div className=\"digit digit-min\">{clock.minute}</div>\n            <div className=\"digit digit-sec\">{clock.second}</div>\n            <div className=\"meridiem\">{clock.meridiem}</div>\n          </div>\n        </div>\n      ))}\n      <div className=\"clockWrap !justify-center transition duration-300 ease-in-out transform hover:-translate-y-1 hover:shadow-lg group cursor-pointer\">\n        <span className=\"self-center group-hover:scale-125 text-2xl\">âž•</span>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport \"./styles.scss\";\n\nexport default function CountryFlag({\n  code,\n  iconClassName = \"\",\n  wrapperClassName = \"\"\n}: T_CountryFlagProp) {\n  return (\n    <span className={wrapperClassName}>\n      <i\n        className={`countryFlagSprite countryFlag-${code.toLowerCase()} ${iconClassName}`}\n      ></i>\n    </span>\n  );\n}\n\nexport type T_CountryFlagProp = {\n  code: string;\n  wrapperClassName?: string;\n  iconClassName?: string;\n};\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["useClocksData","otherTimeZones","otherTimeZonesOnly","filter","tz","localTimeZoneName","useState","getClocksDataForLocalAndOtherTimeZones","state","setState","useEffect","intervalId","setInterval","clearInterval","now","DateTime","clocksData","getClockDataForTimeZone","push","map","datetime","timezone","nowInTimeZone","setZone","zoneName","offsetNameLong","offsetNameShort","hour","minute","second","isInDST","year","monthShort","monthLong","day","weekdayLong","weekdayShort","timeZoneName","standardizeTimeZoneName","meridiem","toFormat","countryInfo","worldCountries","info","timeZone","countryCode","countryName","isLocal","hourDeg","minuteDeg","secondDeg","replace","Clocks","className","clock","code","fill","viewBox","xmlns","d","style","transform","CountryFlag","iconClassName","wrapperClassName","toLowerCase"],"sourceRoot":""}