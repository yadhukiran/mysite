{"version":3,"file":"static/js/390.dfe78ea1.chunk.js","mappings":"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","sources":["components/CountryFlag/index.tsx","constants/tools/currencyEx.ts","helpers/API/currencyEx.ts","helpers/request.ts","helpers/time.ts","models/currencyEx.ts","pages/Tools/Money/CurrencyEx/index.tsx","webpack://mysite-dev/./src/components/CountryFlag/styles.scss?ae7e"],"sourcesContent":["import React from \"react\";\n\nimport \"./styles.scss\";\n\nexport default function CountryFlag({\n  code,\n  iconClassName = \"\",\n  wrapperClassName = \"\"\n}: T_CountryFlagProp) {\n  return (\n    <span className={wrapperClassName}>\n      <i\n        className={`countryFlagSprite countryFlag-${code.toLowerCase()} ${iconClassName}`}\n      ></i>\n    </span>\n  );\n}\n\nexport type T_CountryFlagProp = {\n  code: string;\n  wrapperClassName?: string;\n  iconClassName?: string;\n};\n","import { T_UnitConversionAllUnitsMap } from \"types/tools/unitConverter\";\n\nexport const currencyAllUnitsMap: T_UnitConversionAllUnitsMap = {\n  INR: {\n    name: \"Indian Rupee\",\n    symbol: \"₹\",\n    altCode: \"IN\"\n  },\n  USD: {\n    name: \"US Dollar\",\n    symbol: \"$\",\n    altCode: \"US\"\n  },\n  EUR: {\n    name: \"Euro\",\n    symbol: \"€\",\n    altCode: \"EU\"\n  },\n  NZD: {\n    name: \"New Zealand Dollar\",\n    symbol: \"$\",\n    altCode: \"NZ\"\n  },\n  AED: {\n    name: \"UAE Dirham\",\n    symbol: \"د.إ\",\n    altCode: \"AE\"\n  },\n  QAR: {\n    name: \"Qatari Riyal\",\n    symbol: \"ر.ق\",\n    altCode: \"QA\"\n  },\n  JPY: {\n    name: \"Japanese Yen\",\n    symbol: \"¥\",\n    altCode: \"JP\"\n  },\n  GBP: {\n    name: \"Great British Pound\",\n    symbol: \"£\",\n    altCode: \"GB\"\n  },\n  RUB: {\n    name: \"Russian Ruble\",\n    symbol: \"₽\",\n    altCode: \"RU\"\n  },\n  CNY: {\n    name: \"Chinese Yuan\",\n    symbol: \"元\",\n    altCode: \"CN\"\n  },\n  AUD: {\n    name: \"Australian Dollar\",\n    symbol: \"$\",\n    altCode: \"AU\"\n  },\n  CAD: {\n    name: \"Canadian Dollar\",\n    symbol: \"$\",\n    altCode: \"CA\"\n  }\n  // : {\n  //   name: \"\",\n  //   symbol: \"¤\",\n  //   altCode: \"\"\n  // }\n};\n\nexport const defaultInputCode = \"INR\";\nexport const defaultTargetCode = \"USD\";\nexport const defaultFavorites = Object.keys(currencyAllUnitsMap);\n\nexport const defaults = {\n  inputCode: \"INR\",\n  targetCode: \"USD\",\n  favoriteCodes: Object.keys(currencyAllUnitsMap)\n};\n","import CONST from \"constants/app\";\nimport { getTimetamp } from \"helpers/time\";\nimport { LocalStorage } from \"helpers/webStorage\";\nimport {\n  mapCurrencyExRateResponse,\n  T_CurrencyExData,\n  T_CurrencyExResponse\n} from \"models/currencyEx\";\nimport request, { T_HTTPMethod } from \"helpers/request\";\n\nexport async function fetchCurrencyExData() {\n  let result: T_CurrencyExData | null = JSON.parse(\n    LocalStorage.getItem(CONST.webStorage.currencyExData) ?? \"null\"\n  );\n\n  // Make the API call only when necessary\n  if (\n    !result || // if there is no cached data yet\n    getTimetamp() > result.timeNextUpdate // // OR if cached data is expired\n  ) {\n    const response = await request<T_CurrencyExResponse>({\n      method: T_HTTPMethod.GET,\n      endpoint: CONST.API.currencyEx\n    });\n    if (response.result) {\n      result = mapCurrencyExRateResponse(response.result);\n      // Update cache with latest data\n      LocalStorage.setItem(\n        CONST.webStorage.currencyExData,\n        JSON.stringify(result)\n      );\n    }\n  }\n\n  return result?.conversionRates;\n}\n","export const enum T_HTTPMethod {\n  GET = \"GET\",\n  POST = \"POST\",\n  PUT = \"PUT\",\n  PATCH = \"PATCH\",\n  DELETE = \"DELETE\"\n}\n\ninterface T_RequestOptions {\n  method: T_HTTPMethod;\n  endpoint: string;\n  params?: { [key: string]: any };\n  headers?: HeadersInit;\n  body?: any;\n  rawBody?: BodyInit | null;\n}\n\nexport const getQueryParams = (params: { [key: string]: string }): string =>\n  Object.keys(params)\n    .filter(\n      (k) =>\n        typeof params[k] !== \"undefined\" &&\n        params[k] !== null &&\n        params[k] !== \"\"\n    ) // removes if empty, but accepts \"0\"\n    .map((k) => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`)\n    .join(\"&\");\n\nexport default async function request<T>({\n  method,\n  endpoint,\n  params,\n  headers,\n  body,\n  rawBody\n}: T_RequestOptions): Promise<{\n  result?: T;\n  error?: unknown;\n}> {\n  let url = endpoint;\n  if (params) {\n    url += (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + getQueryParams(params);\n  }\n\n  const fetchOptions: RequestInit = {\n    headers,\n    method,\n    credentials: \"same-origin\",\n    mode: \"cors\"\n  };\n  if (method !== T_HTTPMethod.GET && (rawBody || body)) {\n    fetchOptions.body = rawBody || JSON.stringify(body);\n  }\n\n  try {\n    const response = await fetch(url, fetchOptions);\n    const contentType = response.headers.get(\"Content-Type\") || \"\";\n    let result: T;\n\n    if (contentType.includes(\"application/json\")) {\n      result = await response.json();\n    } else {\n      result = response as unknown as T;\n    }\n\n    if (response.status >= 400) {\n      throw result || (await response.text());\n    }\n\n    return { result };\n  } catch (error) {\n    return { error: error instanceof Error ? error.message : error };\n  }\n}\n","export function getTimetamp() {\n  return Math.floor(+Date.now() / 1000);\n}\n","import { T_ConversionRates } from \"components/UnitConverter/types\";\n\nexport function mapCurrencyExRateResponse(response: T_CurrencyExResponse) {\n  return {\n    baseCode: response.base_code,\n    conversionRates: response.conversion_rates,\n    timeLastUpdate: response.time_last_update_unix,\n    timeNextUpdate: response.time_next_update_unix\n  };\n}\n\n/**\n * Types\n */\nexport interface T_CurrencyExResponse {\n  conversion_rates: T_ConversionRates;\n  base_code: string;\n  time_last_update_unix: number;\n  time_last_update_utc: string;\n  time_next_update_unix: number;\n  time_next_update_utc: string;\n}\n\nexport type T_CurrencyExData = ReturnType<typeof mapCurrencyExRateResponse>;\n","import React, { useEffect, useState } from \"react\";\n\nimport UnitConverter from \"components/UnitConverter\";\nimport * as CONST_CURRENCY_EX from \"constants/tools/currencyEx\";\nimport { fetchCurrencyExData } from \"helpers/API/currencyEx\";\nimport CountryFlag from \"components/CountryFlag\";\n\nexport default function CurrencyEx() {\n  const [conversionRates, setState] =\n    useState<Awaited<ReturnType<typeof fetchCurrencyExData>>>();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      let result = await fetchCurrencyExData();\n\n      if (result) {\n        setState(result);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // TODO:loading indicator / animate-pulse empty content placholders\n  if (!conversionRates) {\n    return null;\n  }\n\n  return (\n    <UnitConverter\n      allUnitsMap={CONST_CURRENCY_EX.currencyAllUnitsMap}\n      conversionRates={conversionRates}\n      defaults={CONST_CURRENCY_EX.defaults}\n      UnitIconComponent={CountryFlag}\n    />\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["CountryFlag","code","iconClassName","wrapperClassName","className","toLowerCase","currencyAllUnitsMap","INR","name","symbol","altCode","USD","EUR","NZD","AED","QAR","JPY","GBP","RUB","CNY","AUD","CAD","defaultInputCode","defaultTargetCode","defaultFavorites","Object","keys","defaults","inputCode","targetCode","favoriteCodes","fetchCurrencyExData","result","JSON","parse","LocalStorage","CONST","getTimetamp","timeNextUpdate","request","method","T_HTTPMethod","endpoint","response","mapCurrencyExRateResponse","stringify","conversionRates","getQueryParams","params","filter","k","map","encodeURIComponent","join","headers","body","rawBody","url","indexOf","fetchOptions","credentials","mode","GET","fetch","get","includes","json","status","text","error","Error","message","Math","floor","Date","now","baseCode","base_code","conversion_rates","timeLastUpdate","time_last_update_unix","time_next_update_unix","CurrencyEx","useState","setState","useEffect","fetchData","allUnitsMap","CONST_CURRENCY_EX","UnitIconComponent"],"sourceRoot":""}