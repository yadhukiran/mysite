{"version":3,"file":"static/js/2585.06b1868d.chunk.js","mappings":"oHAAO,SAASA,EAASC,GACvB,OAAQA,EAGH,SAASC,EAAMC,GAAmD,IAA7BC,EAA4B,uDAAH,EACnE,OAAOJ,EAASA,EAASG,GAAKE,QAAQD,I,mUCGjC,SAASE,EAAqBC,GACnC,OACEA,EAEGC,QAAQ,WAAY,IAEpBA,QAAQ,eAAgB,MAExBA,QAAQ,SAAU,MAIlB,SAASC,EACdC,EACAC,EACAC,EACAC,GAEA,OAAOH,EAAUI,KAAI,SAACC,GAAD,eAAC,UACjBA,GADgB,IAEnBR,MAAOS,EACLL,EACAC,EACAG,EAAQE,KACRJ,QAKC,SAASK,EACdC,GAEA,OAAOA,EAAcL,KAAI,SAACG,GAAD,MAAW,CAAEA,KAAAA,EAAMV,MAAO,SAoB9C,SAASS,EACdL,EACAC,EACAQ,EACAP,GAEA,IAAMZ,GAAKY,EACLQ,EAAKV,EAAgBC,GACrBU,EAAKX,EAAgBS,GAE3B,OAAOlB,EAAAA,EAAAA,OAAOoB,EAAKrB,EAAKoB,K,sBCtEX,SAASE,EAAgBC,EAAKC,EAAKlB,GAYhD,OAXIkB,KAAOD,EACTE,OAAOC,eAAeH,EAAKC,EAAK,CAC9BlB,MAAOA,EACPqB,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZN,EAAIC,GAAOlB,EAGNiB,ECVT,SAASO,EAAQC,EAAQC,GACvB,IAAIC,EAAOR,OAAOQ,KAAKF,GAEvB,GAAIN,OAAOS,sBAAuB,CAChC,IAAIC,EAAUV,OAAOS,sBAAsBH,GAC3CC,IAAmBG,EAAUA,EAAQC,QAAO,SAAUC,GACpD,OAAOZ,OAAOa,yBAAyBP,EAAQM,GAAKV,eACjDM,EAAKM,KAAKC,MAAMP,EAAME,GAG7B,OAAOF,EAGM,SAASQ,EAAeC,GACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAAS,MAAQF,UAAUD,GAAKC,UAAUD,GAAK,GACnDA,EAAI,EAAIb,EAAQL,OAAOqB,IAAS,GAAIC,SAAQ,SAAUvB,GACpD,EAAekB,EAAQlB,EAAKsB,EAAOtB,OAChCC,OAAOuB,0BAA4BvB,OAAOwB,iBAAiBP,EAAQjB,OAAOuB,0BAA0BF,IAAWhB,EAAQL,OAAOqB,IAASC,SAAQ,SAAUvB,GAC5JC,OAAOC,eAAegB,EAAQlB,EAAKC,OAAOa,yBAAyBQ,EAAQtB,OAI/E,OAAOkB,E","sources":["helpers/number.ts","models/unitConverter.ts","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["export function toNumber(x: any) {\n  return +x;\n}\n\nexport function round(num: number | string, fractionDigits: number = 2) {\n  return toNumber(toNumber(num).toFixed(fractionDigits));\n}\n","import {\n  T_ConversionRates,\n  T_FavoriteCodes,\n  T_FavoriteItemWithValue,\n  T_FavoritesWithValue\n} from \"components/UnitConverter/types\";\nimport { round } from \"helpers/number\";\n\nexport function sanitizeNumericInput(value: string) {\n  return (\n    value\n      // allow only numbers (with/without decimal values)\n      .replace(/[^0-9.]/g, \"\")\n      // allow only one decimal\n      .replace(/(\\..*?)\\..*/g, \"$1\")\n      // allow leading zero only for decimal values\n      .replace(/^0(\\d)/, \"$1\")\n  );\n}\n\nexport function calculateConversionRateForFavorites(\n  favorites: T_FavoriteItemWithValue[],\n  conversionRates: T_ConversionRates,\n  inputCode: string,\n  inputAmount: string | number\n) {\n  return favorites.map((favItem) => ({\n    ...favItem,\n    value: calculateConversionRate(\n      conversionRates,\n      inputCode,\n      favItem.code,\n      inputAmount\n    )\n  }));\n}\n\nexport function getDefaultFavorites(\n  favoriteCodes: T_FavoriteCodes\n): T_FavoritesWithValue {\n  return favoriteCodes.map((code) => ({ code, value: null }));\n}\n\n/**\n * Assume:\n *    base code (of master data): BBB\n *    input code: CCC\n *    input value: x\n *    target code: YYY\n *\n * and we know (from master data):\n *    1 BBB = n1 CCC\n *    1 BBB = n2 YYY\n *\n * then,\n *               1 CCC  =  (1 / n1) BBB\n *               x CCC  =  x * (1 / n1) BBB\n *    x * (1 / n1) BBB  =  n2 * x * (1 / n1) YYY\n *               x CCC  =  n2 * x * / n1 YYY\n */\nexport function calculateConversionRate(\n  conversionRates: T_ConversionRates,\n  inputCode: string,\n  targetCode: string,\n  inputAmount: string | number\n) {\n  const x = +inputAmount;\n  const n1 = conversionRates[inputCode];\n  const n2 = conversionRates[targetCode];\n\n  return round((n2 * x) / n1);\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}"],"names":["toNumber","x","round","num","fractionDigits","toFixed","sanitizeNumericInput","value","replace","calculateConversionRateForFavorites","favorites","conversionRates","inputCode","inputAmount","map","favItem","calculateConversionRate","code","getDefaultFavorites","favoriteCodes","targetCode","n1","n2","_defineProperty","obj","key","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}