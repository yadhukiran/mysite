{"version":3,"file":"static/js/8184.1019456c.chunk.js","mappings":"yPAMe,SAASA,IAAU,IAAD,IACzBC,GAAaC,EAAAA,EAAAA,QAAyB,MACtCC,GAAiBD,EAAAA,EAAAA,QAA4B,MAC7CE,GAAiBF,EAAAA,EAAAA,QAA4B,MAC7CG,GAAWH,EAAAA,EAAAA,QAAO,CAAEI,gBAAgB,EAAOC,gBAAgB,IACjE,GAA0BC,EAAAA,EAAAA,UAAS,IAA1BC,GAAT,eACA,GAA4BD,EAAAA,EAAAA,UAAS,IAA5BE,GAAT,eAyCA,OACE,iBAAKC,UAAU,SAAf,WACE,eAAIA,UAAU,yBAAd,mCACA,kBACEC,WAAS,EACTC,YAAY,0BACZF,UAAU,WACVG,KAAK,OACLC,IAAKd,KAEP,kBAAMU,UAAU,OAAhB,WACE,qBACEI,IAAKZ,EACLQ,UAAS,oBACP,UAAAN,EAASW,eAAT,SAAkBV,eAAiB,aAAe,IAEpDO,YAAY,gBAEd,iBAAKF,UAAU,kBAAf,WACE,mBAAQM,QA1DA,WACd,IAAIC,EACJ,IAAK,IAAD,QACFA,EAAmBC,IAAAA,QAAA,oBACjBhB,EAAea,eADE,aACjB,EAAwBI,aADP,QACgB,GADhB,oBAEjBnB,EAAWe,eAFM,aAEjB,EAAoBI,aAFH,QAEY,IAC7BC,WACFhB,EAASW,QAASV,gBAAiB,EACnC,MAAOgB,GAAQ,IAAD,EACdjB,EAASW,QAASV,gBAAiB,EACnCY,EAAgB,kCACbI,QADa,IACbA,OADa,EACbA,EAAiBC,eADJ,QACe,qBAIjCnB,EAAeY,QAASI,MAAQF,EAChCT,EAAcS,IA0CkBJ,KAAK,SAASH,UAAU,MAAlD,sBAGA,mBAAQM,QA1CA,WACd,IAAIO,EACJ,IAAK,IAAD,QAKFA,EAJcL,IAAAA,QAAA,oBACZf,EAAeY,eADH,aACZ,EAAwBI,aADZ,QACqB,GADrB,oBAEZnB,EAAWe,eAFC,aAEZ,EAAoBI,aAFR,QAEiB,IAENC,SAASI,KAClCpB,EAASW,QAAST,gBAAiB,EACnC,MAAOe,GAAQ,IAAD,EACdjB,EAASW,QAAST,gBAAiB,EACnCiB,EAAgB,kCACbF,QADa,IACbA,OADa,EACbA,EAAiBC,eADJ,QACe,qBAIjCpB,EAAea,QAASI,MAAQI,EAChCd,EAAgBc,IAyBgBV,KAAK,SAASH,UAAU,MAAlD,yBAIF,qBACEI,IAAKX,EACLO,UAAS,oBACP,UAAAN,EAASW,eAAT,SAAkBT,eAAiB,aAAe,IAEpDM,YAAY,2B,0CCnFtB,c","sources":["pages/Tools/Crypto/index.tsx","pages/Tools/Crypto/styles.scss"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport CryptoAES from \"crypto-js/aes\";\nimport CryptoUTF8Enc from \"crypto-js/enc-utf8\";\n\nimport \"./styles.scss\";\n\nexport default function Crypto() {\n  const keyInputEl = useRef<HTMLInputElement>(null);\n  const encryptInputEl = useRef<HTMLTextAreaElement>(null);\n  const decryptInputEl = useRef<HTMLTextAreaElement>(null);\n  const errorRef = useRef({ isEncryptError: false, isDecryptError: false });\n  const [, setCipherText] = useState(\"\");\n  const [, setOriginalText] = useState(\"\");\n\n  const encrypt = () => {\n    let encryptionResult: string;\n    try {\n      encryptionResult = CryptoAES.encrypt(\n        encryptInputEl.current?.value ?? \"\",\n        keyInputEl.current?.value ?? \"\"\n      ).toString();\n      errorRef.current!.isEncryptError = false;\n    } catch (error) {\n      errorRef.current!.isEncryptError = true;\n      encryptionResult = `ERROR::${\n        (error as Error)?.message ?? \"Failed to encrypt\"\n      }`;\n    }\n\n    decryptInputEl.current!.value = encryptionResult;\n    setCipherText(encryptionResult);\n  };\n\n  const decrypt = () => {\n    let decryptionResult: string;\n    try {\n      const bytes = CryptoAES.decrypt(\n        decryptInputEl.current?.value ?? \"\",\n        keyInputEl.current?.value ?? \"\"\n      );\n      decryptionResult = bytes.toString(CryptoUTF8Enc);\n      errorRef.current!.isDecryptError = false;\n    } catch (error) {\n      errorRef.current!.isDecryptError = true;\n      decryptionResult = `ERROR::${\n        (error as Error)?.message ?? \"Failed to decrypt\"\n      }`;\n    }\n\n    encryptInputEl.current!.value = decryptionResult;\n    setOriginalText(decryptionResult);\n  };\n\n  return (\n    <div className=\"Crypto\">\n      <h1 className=\"font-bold text-xl py-4\">AES (CBC w/o PBKDF2)</h1>\n      <input\n        autoFocus\n        placeholder=\"Secret Key &#128477;\"\n        className=\"keyInput\"\n        type=\"text\"\n        ref={keyInputEl}\n      />\n      <form className=\"form\">\n        <textarea\n          ref={encryptInputEl}\n          className={`textInput ${\n            errorRef.current?.isEncryptError ? \"bg-red-200\" : \"\"\n          }`}\n          placeholder=\"Plain text\"\n        />\n        <div className=\"buttonContainer\">\n          <button onClick={encrypt} type=\"button\" className=\"btn\">\n            Encrypt\n          </button>\n          <button onClick={decrypt} type=\"button\" className=\"btn\">\n            Decrypt\n          </button>\n        </div>\n        <textarea\n          ref={decryptInputEl}\n          className={`textInput ${\n            errorRef.current?.isDecryptError ? \"bg-red-200\" : \"\"\n          }`}\n          placeholder=\"Encrypted text\"\n        />\n      </form>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["Crypto","keyInputEl","useRef","encryptInputEl","decryptInputEl","errorRef","isEncryptError","isDecryptError","useState","setCipherText","setOriginalText","className","autoFocus","placeholder","type","ref","current","onClick","encryptionResult","CryptoAES","value","toString","error","message","decryptionResult","CryptoUTF8Enc"],"sourceRoot":""}