{"version":3,"file":"static/js/3367.4e4773c8.chunk.js","mappings":"yOAGO,IAAMA,EAA8C,CACzDC,EAAG,CACDC,KAAM,SACNC,OAAQ,KAEVC,EAAG,CACDF,KAAM,UACNC,OAAQ,SAEVE,EAAG,CACDH,KAAM,aACNC,OAAQ,SAEVG,EAAG,CACDJ,KAAM,UACNC,OAAQ,UA4BCI,EAAW,IAEXC,EAAW,CACtBC,UAAW,IACXC,WAAY,IACZC,cAAeC,OAAOC,KAAKb,K,sBCnDtB,SAASc,EAASC,GACvB,OAAQA,EAGH,SAASC,EAAMC,GAAmD,IAA7BC,EAA4B,uDAAH,EACnE,OAAOJ,EAASA,EAASG,GAAKE,QAAQD,I,kLCD3BE,EAA2C,CACtDC,aAAcC,EAAAA,SACdC,WAAY,CACVtB,EAAG,SAACA,GAAD,OAAea,EAAAA,EAAAA,UAASb,IAC3BG,EAAG,SAACH,GAAD,OAAee,EAAAA,EAAAA,QAAMF,EAAAA,EAAAA,UAASb,GAAK,SACtCI,EAAG,SAACJ,GAAD,OAAee,EAAAA,EAAAA,OAAgC,IAAxBF,EAAAA,EAAAA,UAASb,GAAK,QAAe,GAAK,IAC5DK,EAAG,SAACL,GAAD,OAAee,EAAAA,EAAAA,OAAqB,GAAdF,EAAAA,EAAAA,UAASb,GAAU,KAE9CuB,WAAY,CACVvB,EAAG,SAACA,GAAD,OAAea,EAAAA,EAAAA,UAASb,IAC3BG,EAAG,SAACA,GAAD,OAAgBY,EAAAA,EAAAA,QAAMF,EAAAA,EAAAA,UAASV,GAAK,SACvCC,EAAG,SAACA,GAAD,OAAmBW,EAAAA,EAAAA,OAA4B,IAApBF,EAAAA,EAAAA,UAAST,GAAK,IAAW,GAAK,QAC5DC,EAAG,SAACA,GAAD,OAAeU,EAAAA,EAAAA,OAAqB,GAAdF,EAAAA,EAAAA,UAASR,GAAU","sources":["constants/tools/temperature.ts","helpers/number.ts","models/tools/temperature.ts"],"sourcesContent":["import { T_UnitConversionAllUnitsMap } from \"types/tools/unitConverter\";\nimport { T_FavoriteCodes } from \"components/UnitConverter/types\";\n\nexport const temperatureMap: T_UnitConversionAllUnitsMap = {\n  K: {\n    name: \"Kelvin\",\n    symbol: \"K\"\n  },\n  C: {\n    name: \"Celsius\",\n    symbol: \"°C\"\n  },\n  F: {\n    name: \"Fahrenheit\",\n    symbol: \"°F\"\n  },\n  R: {\n    name: \"Rankine\",\n    symbol: \"°R\"\n  }\n  // RO: {\n  //   name: \"Rømer\",\n  //   symbol: \"°Rø\"\n  // },\n  // RE: {\n  //   name: \"Réaumur\",\n  //   symbol: \"°Ré\"\n  // },\n  // N: {\n  //   name: \"Newton\",\n  //   symbol: \"°N\"\n  // },\n  // D: {\n  //   name: \"Delisle\",\n  //   symbol: \"°D\"\n  // },\n  // L: {\n  //   name: \"Leiden\",\n  //   symbol: \"°L\"\n  // },\n  // W: {\n  //   name: \"Wedgwood\",\n  //   symbol: \"°W\"\n  // }\n};\n\nexport const baseUnit = \"K\";\n\nexport const defaults = {\n  inputCode: \"C\",\n  targetCode: \"F\",\n  favoriteCodes: Object.keys(temperatureMap) as T_FavoriteCodes\n};\n","export function toNumber(x: any) {\n  return +x;\n}\n\nexport function round(num: number | string, fractionDigits: number = 2) {\n  return toNumber(toNumber(num).toFixed(fractionDigits));\n}\n","import * as CONST_TEMPERATURE from \"constants/tools/temperature\";\nimport { round, toNumber } from \"helpers/number\";\nimport { T_ConversionFormulas } from \"types/tools/unitConverter\";\n\nexport const conversionFormulas: T_ConversionFormulas = {\n  baseUnitCode: CONST_TEMPERATURE.baseUnit,\n  fromBaseTo: {\n    K: (K: Kelvin) => toNumber(K),\n    C: (K: Kelvin) => round(toNumber(K) - 273.15),\n    F: (K: Kelvin) => round(((toNumber(K) - 273.15) * 9) / 5) + 32,\n    R: (K: Kelvin) => round((toNumber(K) * 9) / 5)\n  },\n  toBaseFrom: {\n    K: (K: Kelvin) => toNumber(K),\n    C: (C: Celcius) => round(toNumber(C) + 273.15),\n    F: (F: Fahrenheit) => round(((toNumber(F) - 32) * 5) / 9) + 273.15,\n    R: (R: Kelvin) => round((toNumber(R) * 5) / 9)\n  }\n};\n\ntype Kelvin = number;\ntype Fahrenheit = number;\ntype Celcius = number;\n"],"names":["temperatureMap","K","name","symbol","C","F","R","baseUnit","defaults","inputCode","targetCode","favoriteCodes","Object","keys","toNumber","x","round","num","fractionDigits","toFixed","conversionFormulas","baseUnitCode","CONST_TEMPERATURE","fromBaseTo","toBaseFrom"],"sourceRoot":""}